@startuml トモリエデータベース設計
!theme plain
skinparam backgroundColor #FAFAFA
skinparam defaultFontSize 10
skinparam defaultFontName "Noto Sans JP"

title トモリエ（Tomorie）データベース設計 - Supabase PostgreSQL

package "認証・ユーザー管理" as auth_user {
  entity "auth.users" as auth_users {
    * id : UUID (PK)
    --
    email : VARCHAR(255)
    phone : VARCHAR(15)
    created_at : TIMESTAMP
    updated_at : TIMESTAMP
    email_confirmed_at : TIMESTAMP
    phone_confirmed_at : TIMESTAMP
    last_sign_in_at : TIMESTAMP
    raw_app_meta_data : JSONB
    raw_user_meta_data : JSONB
  }

  entity "users" as users {
    * id : UUID (PK)
    * auth_id : UUID (FK)
    --
    email : VARCHAR(255) UNIQUE
    display_name : VARCHAR(100)
    birth_date : DATE
    gender : VARCHAR(10) CHECK
    prefecture : VARCHAR(50)
    city : VARCHAR(100)
    bio : TEXT
    occupation : VARCHAR(100)
    education : VARCHAR(100)
    interests : TEXT[]
    looking_for : VARCHAR(50) CHECK
    is_verified : BOOLEAN DEFAULT FALSE
    verification_status : VARCHAR(20) DEFAULT 'pending'
    subscription_plan : VARCHAR(20) DEFAULT 'free'
    subscription_expires_at : TIMESTAMP WITH TIME ZONE
    last_active_at : TIMESTAMP WITH TIME ZONE
    created_at : TIMESTAMP WITH TIME ZONE
    updated_at : TIMESTAMP WITH TIME ZONE
  }

  entity "user_photos" as user_photos {
    * id : UUID (PK)
    * user_id : UUID (FK)
    --
    photo_url : TEXT
    is_primary : BOOLEAN DEFAULT FALSE
    order_index : INTEGER DEFAULT 0
    created_at : TIMESTAMP WITH TIME ZONE
  }

  entity "user_verification" as user_verification {
    * id : UUID (PK)
    * user_id : UUID (FK)
    --
    document_type : VARCHAR(50)
    document_url : TEXT
    verification_status : VARCHAR(20) DEFAULT 'pending'
    verified_at : TIMESTAMP WITH TIME ZONE
    verified_by : UUID
    notes : TEXT
    created_at : TIMESTAMP WITH TIME ZONE
  }
}

package "マッチング機能" as matching {
  entity "likes" as likes {
    * id : UUID (PK)
    * from_user_id : UUID (FK)
    * to_user_id : UUID (FK)
    --
    is_active : BOOLEAN DEFAULT TRUE
    created_at : TIMESTAMP WITH TIME ZONE
    UNIQUE(from_user_id, to_user_id)
  }

  entity "matches" as matches {
    * id : UUID (PK)
    * user1_id : UUID (FK)
    * user2_id : UUID (FK)
    --
    matched_at : TIMESTAMP WITH TIME ZONE
    is_active : BOOLEAN DEFAULT TRUE
    last_message_at : TIMESTAMP WITH TIME ZONE
    UNIQUE(user1_id, user2_id)
  }

  entity "messages" as messages {
    * id : UUID (PK)
    * match_id : UUID (FK)
    * sender_id : UUID (FK)
    --
    content : TEXT
    message_type : VARCHAR(20) DEFAULT 'text'
    is_read : BOOLEAN DEFAULT FALSE
    read_at : TIMESTAMP WITH TIME ZONE
    created_at : TIMESTAMP WITH TIME ZONE
  }
}

package "コミュニティ機能" as community {
  entity "communities" as communities {
    * id : UUID (PK)
    * creator_id : UUID (FK)
    --
    name : VARCHAR(100)
    description : TEXT
    category : VARCHAR(50)
    cover_image_url : TEXT
    member_count : INTEGER DEFAULT 0
    max_members : INTEGER DEFAULT 500
    is_public : BOOLEAN DEFAULT TRUE
    is_active : BOOLEAN DEFAULT TRUE
    region : VARCHAR(50)
    created_at : TIMESTAMP WITH TIME ZONE
    updated_at : TIMESTAMP WITH TIME ZONE
  }

  entity "community_members" as community_members {
    * id : UUID (PK)
    * community_id : UUID (FK)
    * user_id : UUID (FK)
    --
    role : VARCHAR(20) DEFAULT 'member'
    joined_at : TIMESTAMP WITH TIME ZONE
    is_active : BOOLEAN DEFAULT TRUE
    UNIQUE(community_id, user_id)
  }

  entity "community_posts" as community_posts {
    * id : UUID (PK)
    * community_id : UUID (FK)
    * author_id : UUID (FK)
    --
    title : VARCHAR(200)
    content : TEXT
    post_type : VARCHAR(20) DEFAULT 'discussion'
    image_urls : TEXT[]
    like_count : INTEGER DEFAULT 0
    comment_count : INTEGER DEFAULT 0
    is_pinned : BOOLEAN DEFAULT FALSE
    created_at : TIMESTAMP WITH TIME ZONE
    updated_at : TIMESTAMP WITH TIME ZONE
  }

  entity "post_comments" as post_comments {
    * id : UUID (PK)
    * post_id : UUID (FK)
    * author_id : UUID (FK)
    --
    content : TEXT
    parent_comment_id : UUID (FK)
    like_count : INTEGER DEFAULT 0
    created_at : TIMESTAMP WITH TIME ZONE
  }

  entity "post_likes" as post_likes {
    * id : UUID (PK)
    * post_id : UUID (FK)
    * user_id : UUID (FK)
    --
    created_at : TIMESTAMP WITH TIME ZONE
    UNIQUE(post_id, user_id)
  }

  entity "comment_likes" as comment_likes {
    * id : UUID (PK)
    * comment_id : UUID (FK)
    * user_id : UUID (FK)
    --
    created_at : TIMESTAMP WITH TIME ZONE
    UNIQUE(comment_id, user_id)
  }
}

package "イベント機能" as events {
  entity "events" as events {
    * id : UUID (PK)
    * organizer_id : UUID (FK)
    --
    title : VARCHAR(200)
    description : TEXT
    event_type : VARCHAR(50)
    location : VARCHAR(200)
    prefecture : VARCHAR(50)
    city : VARCHAR(100)
    start_datetime : TIMESTAMP WITH TIME ZONE
    end_datetime : TIMESTAMP WITH TIME ZONE
    max_participants : INTEGER
    current_participants : INTEGER DEFAULT 0
    fee : INTEGER DEFAULT 0
    community_id : UUID (FK)
    cover_image_url : TEXT
    is_active : BOOLEAN DEFAULT TRUE
    registration_deadline : TIMESTAMP WITH TIME ZONE
    created_at : TIMESTAMP WITH TIME ZONE
    updated_at : TIMESTAMP WITH TIME ZONE
  }

  entity "event_participants" as event_participants {
    * id : UUID (PK)
    * event_id : UUID (FK)
    * user_id : UUID (FK)
    --
    status : VARCHAR(20) DEFAULT 'registered'
    registered_at : TIMESTAMP WITH TIME ZONE
    UNIQUE(event_id, user_id)
  }
}

package "セキュリティ・監視" as security {
  entity "reports" as reports {
    * id : UUID (PK)
    * reporter_id : UUID (FK)
    * reported_user_id : UUID (FK)
    --
    reported_content_id : UUID
    reported_content_type : VARCHAR(50)
    reason : VARCHAR(100)
    description : TEXT
    status : VARCHAR(20) DEFAULT 'pending'
    resolved_by : UUID
    resolved_at : TIMESTAMP WITH TIME ZONE
    created_at : TIMESTAMP WITH TIME ZONE
  }

  entity "blocked_users" as blocked_users {
    * id : UUID (PK)
    * blocker_id : UUID (FK)
    * blocked_id : UUID (FK)
    --
    reason : VARCHAR(100)
    created_at : TIMESTAMP WITH TIME ZONE
    UNIQUE(blocker_id, blocked_id)
  }

  entity "moderation_logs" as moderation_logs {
    * id : UUID (PK)
    * target_user_id : UUID (FK)
    --
    moderator_id : UUID
    action_type : VARCHAR(50)
    target_content_id : UUID
    target_content_type : VARCHAR(50)
    reason : TEXT
    action_duration : INTERVAL
    created_at : TIMESTAMP WITH TIME ZONE
  }
}

package "サブスクリプション・決済" as subscription {
  entity "subscriptions" as subscriptions {
    * id : UUID (PK)
    * user_id : UUID (FK)
    --
    plan_type : VARCHAR(20)
    status : VARCHAR(20) DEFAULT 'active'
    payment_provider : VARCHAR(50)
    external_subscription_id : VARCHAR(200)
    started_at : TIMESTAMP WITH TIME ZONE
    expires_at : TIMESTAMP WITH TIME ZONE
    auto_renew : BOOLEAN DEFAULT TRUE
    cancelled_at : TIMESTAMP WITH TIME ZONE
    created_at : TIMESTAMP WITH TIME ZONE
  }

  entity "payment_history" as payment_history {
    * id : UUID (PK)
    * user_id : UUID (FK)
    * subscription_id : UUID (FK)
    --
    amount : INTEGER
    currency : VARCHAR(3) DEFAULT 'JPY'
    payment_provider : VARCHAR(50)
    payment_method : VARCHAR(50)
    transaction_id : VARCHAR(200)
    status : VARCHAR(20) DEFAULT 'pending'
    paid_at : TIMESTAMP WITH TIME ZONE
    created_at : TIMESTAMP WITH TIME ZONE
  }
}

package "通知機能" as notifications {
  entity "notifications" as notifications {
    * id : UUID (PK)
    * user_id : UUID (FK)
    --
    title : VARCHAR(200)
    content : TEXT
    type : VARCHAR(50)
    related_id : UUID
    related_type : VARCHAR(50)
    is_read : BOOLEAN DEFAULT FALSE
    read_at : TIMESTAMP WITH TIME ZONE
    created_at : TIMESTAMP WITH TIME ZONE
  }

  entity "notification_settings" as notification_settings {
    * id : UUID (PK)
    * user_id : UUID (FK)
    --
    email_notifications : BOOLEAN DEFAULT TRUE
    push_notifications : BOOLEAN DEFAULT TRUE
    match_notifications : BOOLEAN DEFAULT TRUE
    message_notifications : BOOLEAN DEFAULT TRUE
    community_notifications : BOOLEAN DEFAULT TRUE
    event_notifications : BOOLEAN DEFAULT TRUE
    created_at : TIMESTAMP WITH TIME ZONE
    updated_at : TIMESTAMP WITH TIME ZONE
  }
}

' リレーションシップ
auth_users ||--|| users : "1:1"
users ||--o{ user_photos : "1:*"
users ||--o{ user_verification : "1:*"

users ||--o{ likes : "from_user"
users ||--o{ likes : "to_user"
users ||--o{ matches : "user1"
users ||--o{ matches : "user2"
matches ||--o{ messages : "1:*"
users ||--o{ messages : "sender"

users ||--o{ communities : "creator"
communities ||--o{ community_members : "1:*"
users ||--o{ community_members : "1:*"
communities ||--o{ community_posts : "1:*"
users ||--o{ community_posts : "author"
community_posts ||--o{ post_comments : "1:*"
users ||--o{ post_comments : "author"
post_comments ||--o{ post_comments : "parent"

users ||--o{ events : "organizer"
communities ||--o{ events : "1:*"
events ||--o{ event_participants : "1:*"
users ||--o{ event_participants : "1:*"

users ||--o{ reports : "reporter"
users ||--o{ reports : "reported_user"
users ||--o{ blocked_users : "blocker"
users ||--o{ blocked_users : "blocked"
users ||--o{ moderation_logs : "target_user"

users ||--o{ subscriptions : "1:*"
subscriptions ||--o{ payment_history : "1:*"
users ||--o{ payment_history : "1:*"

users ||--o{ notifications : "1:*"
users ||--|| notification_settings : "1:1"

community_posts ||--o{ post_likes : "1:*"
users ||--o{ post_likes : "1:*"
post_comments ||--o{ comment_likes : "1:*"
users ||--o{ comment_likes : "1:*"

@enduml

' ================================
' インデックス設計
' ================================

@startuml インデックス設計
!theme plain

title データベースインデックス設計

class "主要インデックス" {
  **パフォーマンス重要度: HIGH**
  --
  users.auth_id (UNIQUE)
  users.email (UNIQUE)
  users.prefecture, users.city (複合)
  users.looking_for
  users.is_verified
  users.last_active_at
  --
  likes.from_user_id
  likes.to_user_id
  likes.from_user_id, to_user_id (複合UNIQUE)
  --
  matches.user1_id
  matches.user2_id
  matches.is_active
  matches.last_message_at
  --
  messages.match_id
  messages.sender_id
  messages.created_at
  messages.is_read
}

class "セカンダリインデックス" {
  **パフォーマンス重要度: MEDIUM**
  --
  communities.category
  communities.region
  communities.is_public
  communities.member_count
  --
  community_posts.community_id
  community_posts.author_id
  community_posts.created_at
  community_posts.post_type
  --
  events.start_datetime
  events.prefecture, city (複合)
  events.is_active
  events.organizer_id
  --
  notifications.user_id, is_read (複合)
  notifications.created_at
}

class "検索用インデックス" {
  **フルテキスト検索対応**
  --
  users.display_name (GIN)
  users.interests (GIN配列)
  --
  communities.name (GIN)
  communities.description (GIN)
  --
  community_posts.title (GIN)
  community_posts.content (GIN)
  --
  events.title (GIN)
  events.description (GIN)
}

@enduml

' ================================
' Row Level Security (RLS) 設計
' ================================

@startuml RLSセキュリティポリシー
!theme plain

title Row Level Security (RLS) ポリシー設計

package "ユーザーデータ保護" {
  class "users テーブル" {
    **ポリシー名**: users_select_policy
    **操作**: SELECT
    **条件**: is_verified = true AND auth.uid() IS NOT NULL
    --
    **ポリシー名**: users_update_policy
    **操作**: UPDATE
    **条件**: auth.uid() = auth_id
    --
    **説明**: 
    - 認証済みユーザーは確認済みプロフィールのみ閲覧可能
    - 自分のプロフィールのみ更新可能
  }

  class "user_photos テーブル" {
    **ポリシー名**: photos_select_policy
    **操作**: SELECT
    **条件**: EXISTS(SELECT 1 FROM users WHERE id = user_id AND is_verified = true)
    --
    **ポリシー名**: photos_crud_policy
    **操作**: INSERT, UPDATE, DELETE
    **条件**: EXISTS(SELECT 1 FROM users WHERE id = user_id AND auth_id = auth.uid())
  }
}

package "マッチング機能保護" {
  class "messages テーブル" {
    **ポリシー名**: messages_access_policy
    **操作**: ALL
    **条件**: EXISTS(
      SELECT 1 FROM matches 
      WHERE id = match_id 
      AND (user1_id = auth.uid() OR user2_id = auth.uid())
      AND is_active = true
    )
    --
    **説明**: マッチした相手とのメッセージのみアクセス可能
  }

  class "likes テーブル" {
    **ポリシー名**: likes_insert_policy
    **操作**: INSERT
    **条件**: from_user_id = auth.uid()
    --
    **ポリシー名**: likes_select_policy
    **操作**: SELECT
    **条件**: from_user_id = auth.uid() OR to_user_id = auth.uid()
  }
}

package "コミュニティ機能保護" {
  class "community_posts テーブル" {
    **ポリシー名**: posts_select_policy
    **操作**: SELECT
    **条件**: EXISTS(
      SELECT 1 FROM community_members cm
      JOIN communities c ON cm.community_id = c.id
      WHERE cm.user_id = auth.uid() 
      AND cm.community_id = community_posts.community_id
      AND cm.is_active = true
    ) OR EXISTS(
      SELECT 1 FROM communities c
      WHERE c.id = community_posts.community_id
      AND c.is_public = true
    )
    --
    **ポリシー名**: posts_insert_policy
    **操作**: INSERT
    **条件**: author_id = auth.uid() AND EXISTS(
      SELECT 1 FROM community_members
      WHERE user_id = auth.uid() 
      AND community_id = community_posts.community_id
      AND is_active = true
    )
  }
}

package "プライバシー保護" {
  class "blocked_users テーブル" {
    **ポリシー名**: blocked_access_policy
    **操作**: ALL
    **条件**: blocker_id = auth.uid()
    --
    **説明**: 自分がブロックしたユーザー情報のみアクセス可能
  }

  class "reports テーブル" {
    **ポリシー名**: reports_insert_policy
    **操作**: INSERT
    **条件**: reporter_id = auth.uid()
    --
    **ポリシー名**: reports_select_policy
    **操作**: SELECT
    **条件**: reporter_id = auth.uid()
  }
}

@enduml

' ================================
' データベース関数・トリガー設計
' ================================

@startuml データベース関数・トリガー
!theme plain

title データベース関数・トリガー設計

package "自動更新機能" {
  class "updated_at_trigger" {
    **対象テーブル**: users, communities, community_posts, events
    **実行タイミング**: BEFORE UPDATE
    **処理内容**: updated_at = NOW()
    --
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = NOW();
        RETURN NEW;
    END;
    $$ language 'plpgsql';
  }

  class "member_count_trigger" {
    **対象テーブル**: community_members
    **実行タイミング**: AFTER INSERT, UPDATE, DELETE
    **処理内容**: communities.member_count 自動更新
    --
    CREATE OR REPLACE FUNCTION update_community_member_count()
    RETURNS TRIGGER AS $$
    BEGIN
        IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
            UPDATE communities 
            SET member_count = (
                SELECT COUNT(*) 
                FROM community_members 
                WHERE community_id = NEW.community_id 
                AND is_active = true
            )
            WHERE id = NEW.community_id;
            RETURN NEW;
        END IF;
        RETURN OLD;
    END;
    $$ language 'plpgsql';
  }
}

package "マッチング機能" {
  class "create_match_function" {
    **機能**: 相互いいねでマッチ作成
    **実行条件**: likes テーブル INSERT時
    --
    CREATE OR REPLACE FUNCTION create_match_on_mutual_like()
    RETURNS TRIGGER AS $$
    BEGIN
        -- 相手からのいいねが存在するかチェック
        IF EXISTS(
            SELECT 1 FROM likes 
            WHERE from_user_id = NEW.to_user_id 
            AND to_user_id = NEW.from_user_id 
            AND is_active = true
        ) THEN
            -- マッチを作成
            INSERT INTO matches (user1_id, user2_id, matched_at)
            VALUES (
                LEAST(NEW.from_user_id, NEW.to_user_id),
                GREATEST(NEW.from_user_id, NEW.to_user_id),
                NOW()
            )
            ON CONFLICT (user1_id, user2_id) DO NOTHING;
        END IF;
        RETURN NEW;
    END;
    $$ language 'plpgsql';
  }

  class "update_last_message_function" {
    **機能**: マッチの最終メッセージ時刻更新
    **実行条件**: messages テーブル INSERT時
    --
    CREATE OR REPLACE FUNCTION update_match_last_message()
    RETURNS TRIGGER AS $$
    BEGIN
        UPDATE matches 
        SET last_message_at = NEW.created_at
        WHERE id = NEW.match_id;
        RETURN NEW;
    END;
    $$ language 'plpgsql';
  }
}

package "セキュリティ機能" {
  class "age_verification_function" {
    **機能**: 年齢確認（60歳以上チェック）
    **実行条件**: users テーブル INSERT/UPDATE時
    --
    CREATE OR REPLACE FUNCTION verify_age_requirement()
    RETURNS TRIGGER AS $$
    BEGIN
        IF EXTRACT(YEARS FROM AGE(NEW.birth_date)) < 60 THEN
            RAISE EXCEPTION '60歳以上の方のみご利用いただけます';
        END IF;
        RETURN NEW;
    END;
    $$ language 'plpgsql';
  }

  class "auto_moderation_function" {
    **機能**: 不適切コンテンツ自動検知
    **実行条件**: community_posts, messages テーブル INSERT時
    --
    CREATE OR REPLACE FUNCTION auto_moderate_content()
    RETURNS TRIGGER AS $$
    DECLARE
        inappropriate_words TEXT[] := ARRAY['禁止語1', '禁止語2'];
        word TEXT;
    BEGIN
        FOREACH word IN ARRAY inappropriate_words
        LOOP
            IF NEW.content ILIKE '%' || word || '%' THEN
                -- 管理者通知用テーブルにレコード追加
                INSERT INTO moderation_logs (
                    target_content_id,
                    target_content_type,
                    action_type,
                    reason
                ) VALUES (
                    NEW.id,
                    TG_TABLE_NAME,
                    'auto_flag',
                    '不適切な語句を検出: ' || word
                );
                BREAK;
            END IF;
        END LOOP;
        RETURN NEW;
    END;
    $$ language 'plpgsql';
  }
}

@enduml

' ================================
' パフォーマンス最適化
' ================================

@startuml パフォーマンス最適化設計
!theme plain

title パフォーマンス最適化設計

package "クエリ最適化" {
  class "マッチング候補取得" {
    **最適化前**: 
    SELECT * FROM users 
    WHERE age BETWEEN 60 AND 75
    AND prefecture = '東京都'
    ORDER BY RANDOM()
    LIMIT 50;
    --
    **最適化後**:
    WITH filtered_users AS (
      SELECT id, display_name, birth_date, prefecture
      FROM users 
      WHERE is_verified = true
      AND looking_for = 'romance'
      AND prefecture = $1
      AND EXTRACT(YEARS FROM AGE(birth_date)) BETWEEN $2 AND $3
      AND id NOT IN (
        SELECT to_user_id FROM likes WHERE from_user_id = $4
        UNION
        SELECT blocked_id FROM blocked_users WHERE blocker_id = $4
      )
    )
    SELECT * FROM filtered_users
    ORDER BY last_active_at DESC
    LIMIT 50;
  }

  class "メッセージ履歴取得" {
    **最適化**: 
    - created_at DESC インデックス使用
    - LIMIT + OFFSET でページネーション
    - match_id での絞り込み最適化
    --
    SELECT m.*, u.display_name, u.profile_photo_url
    FROM messages m
    JOIN users u ON m.sender_id = u.id
    WHERE m.match_id = $1
    ORDER BY m.created_at DESC
    LIMIT 50 OFFSET $2;
  }
}

package "キャッシュ戦略" {
  class "Redis活用" {
    **オンラインユーザー管理**:
    - Key: "online_users"
    - Value: Set<user_id>
    - TTL: 5分
    --
    **マッチング候補キャッシュ**:
    - Key: "match_candidates:{user_id}"
    - Value: JSON配列
    - TTL: 1時間
    --
    **未読メッセージ数**:
    - Key: "unread_count:{user_id}"
    - Value: Integer
    - TTL: リアルタイム更新
  }

  class "CDN最適化" {
    **プロフィール画像**:
    - Supabase Storage + CDN
    - WebP形式での配信
    - 複数サイズ対応
    --
    **コミュニティ画像**:
    - 遅延読み込み
    - プレースホルダー表示
    - 圧縮最適化
  }
}

package "スケーラビリティ" {
  class "読み書き分離" {
    **マスター**: 書き込み専用
    **リードレプリカ**: 読み込み専用
    --
    **分散対象**:
    - ユーザー検索
    - メッセージ履歴
    - コミュニティ投稿
    - イベント情報
  }

  class "パーティショニング" {
    **messages テーブル**:
    - created_at による月次パーティション
    - 古いデータの自動アーカイブ
    --
    **notifications テーブル**:
    - user_id による範囲パーティション
    - 読み込み性能向上
  }
}

@enduml